//import java.util.ArrayList;
//import java.util.List;
//import java.util.Arrays;
//import java.util.Iterator;
//
///* Simple IntBag Class!
// * @author Ahmet Faruk Ulutaþ
// * @version 17/02/2020
// */
//public class IntBag {
//   
//   // properties
//   Integer bag[]; // an int array called bag that will hold the values of the collection
//   int valid; // that says how many of the elements of bag actually contain values in the collection.
//   int maxElements;
//   
//   // constructors
//   public IntBag() { // one that creates an empty collection (with room for up to 100 elements)
//      
//      maxElements = 100;
//      bag = new Integer[maxElements];
//      valid = 0;
//      
//   }
//   
//   public IntBag( int maxNumberOfElements) { // another that takes the desired maximum number of elements as a parameter
//      
//      maxElements = maxNumberOfElements;
//      bag = new Integer[maxElements];
//      valid = 0;
//      
//   }
//   
//   // methods
//   
//   public Iterator iterator() {
//    return new IntBagIterator( this);  
//   }
//   
//   /**
//    * @param value New value for the collection.
//    * @return true if valid is increased or return false.
//    */
//   public boolean add( int value) {
//      
//      if ( valid < maxElements ) {
//         
//         bag[valid] = value;
//         valid++;
//         return true;
//      }
//      return false;
//      
//   }
//   
//   /**
//    * @param value New value for the collection.
//    * @param i Index of an element.
//    */
//   public boolean add( int i, int value ) {
//      
//      if ( valid < maxElements && i >= 0 && i < valid ) {
//
//         for ( int a = valid + 1; a > i; a-- ) {
//
//            bag[ a] = bag[a - 1];
//         }
//         
//         bag[i] = value;
//         valid++;
//         return true;
//      }
//      return false;
//   }
//   
//   /**
//    * @param bag[] This is the array which will be used to create new array.
//    * @param i This is the index of element which will be removed.
//    * @return This newly created array.
//    */
//   public static Integer[] remove( Integer bag[], int i ) {
//      
//      // Creates an arrayList.
//      List<Integer> arrayList = new ArrayList<Integer>( Arrays.asList(bag));
//      
//      // Add new value into the arrayList's specified index i.
//      arrayList.remove( i);
//      
//      // Convert arrayList to array.
//      bag = arrayList.toArray(bag);
//      
//      return bag;
//   }
//   
//   /**
//    * @param bag[] This is the array which will be used to create new array.
//    * @param i This is the index of element which will be searched.
//    * @return true If the value is not in the array.
//    * @return false If the value is not in the array
//    */
//   public static boolean contains( Integer bag[], int value) {
//      
//      // Creates an arrayList.
//      List<Integer> arrayList = new ArrayList<Integer>( Arrays.asList(bag));
//      
//      if ( arrayList.contains( value) ) {
//         
//         return true;
//      }
//      else {
//         
//         return false;   
//      }
//   }
//   
//   /**
//    * @param bag[] This is the array which will be converted to string representation.
//    * @return This returns to string representation of collection.
//    */
//   public String toString() {
//      
//      String stringBag;
//      stringBag = "";
//      if (valid > 0)
//      {
//         for (int i = 0; i < valid; i++ )
//         {
//            stringBag = stringBag + bag[i];
//            stringBag = stringBag + " ";
//         }
//         return stringBag;
//      }
//      return stringBag;
//   }
//   
//   /**
//    * @return This returns the size of the collection.
//    */
//   public int size() {
//      
//      return valid;
//   }
//   
//   /**
//    * @param i This is the index which will be found in the array.
//    * @return This returns to the element of index i.
//    */
//   public int get( int i) {
//      
//      return bag[i];
//   }
//   
////   public class IntBagIterator implements Iterator {
////    
////      private IntBag aBag;
////      private int index;
////      
////      public IntBagIterator( IntBag aBag) {
////       this.aBag = aBag;
////       this.index = 0;
////      }
////   }
//   
//}

import java.util.Iterator;
public class IntBag
{
  //properties
  int[] bag;
  int valid;
  int maxEls;
  
  //constructors
  public IntBag()
  {
    maxEls = 100;
    bag = new int[maxEls];
    valid = 0;
  }
  public IntBag(int desiredEls)
  {
    maxEls = desiredEls;
    bag = new int[maxEls];
    valid = 0;
  }
  //methods
  public boolean add(int valueToAdd)
  {
    if (valid < maxEls)
    {
      bag[valid] = valueToAdd;
      valid++;
      return true;
    }
    return false;
  }
  public boolean add(int ind, int value)
  {
    if (valid <= maxEls)
    { 
      if (ind >= 0 && ind < valid)
      {
        for ( int j = valid; j > ind; j--) { 
          bag[j] = bag[j - 1]; 
        }
        bag[ind] = value;
        valid++;
        return true;
      }
    }
    return false;
  }
  public boolean remove(int i)
  {
    if (i >=0 && i < valid)
    {
      for (int j = valid - 2 ; j >= i ; j--)
      {
        bag[j] = bag[j+1];
      }
      valid--;
      return true;
    }
    return false;
  }
  public boolean ifContain(int val)
  {
    for (int i = 0 ; i < valid ; i++)
    {
      if (bag[i] == val)
      {
        return true;
      }
    }
    return false;
  }
  public String toString()
  {
    String strbag;
    strbag = "";
    if (valid > 0)
    {
      for (int i = 0 ; i < valid ; i++)
      {
        strbag = strbag + bag[i];
        strbag = strbag + " ";
      }
      return strbag;
    }
    return "No values in the collection";
  }
  public int size()
  {
    return valid;
  }
  public int get(int index)
  {
    if (index < valid)
    {
      return bag[index];
    }
    return 0;
  }
  public String findAll(int val)
  {
    String index;
    index = "";
    for (int i = 0 ; i < valid ; i++)
    {
      if (bag[i] == val)
      {
        index += i;
        index += " ";
      }
    }
    return index;
  }
  public Iterator iterator()
  {
    return new IntBagIterator(this);
  }
  //inner class
  
  public class IntBagIterator implements Iterator {
    
    private IntBag aBag;
    private int index;
    
    public IntBagIterator(IntBag aBag) {
      this.aBag = aBag;
      this.index = 0;
    }
    
    // methods
    
    public boolean hasNext() {
      if (aBag.size() - 1 > index) {
        return true;
      }
      else {
        return false;
      }
    }
    
    public Integer next() {
      if (hasNext()) {
        int a = aBag.get(index);
        Integer integerA = new Integer(a);
        index += 1;
        return integerA;
      }
      else {
        return null;
      }
    }
  }
}